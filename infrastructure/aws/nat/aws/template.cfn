{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "NAT instance in a public subnet and a route table entry in a private subnet that routes all Internet traffic to/from the private subnet",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "String",
            "Default": "admin",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[-_ a-zA-Z0-9]*",
            "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
        },
        "Environment": {
            "Description": "Environment in which the instances belong",
            "Type": "String"
        },
        "VpcId": {
            "Description": "ID of the VPC",
            "Type": "String"
        },
        "PublicSubnetId": {
            "Description": "ID of the public subnet",
            "Type": "String"
        },
        "PrivateRouteTableId": {
            "Description": "ID of the private subnet's route table",
            "Type": "String"
        },
        "AvailabilityZone": {
            "Description": "Availability zone of the subnets",
            "Type": "String"
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m1.small",
            "AllowedValues": [
                "t1.micro",
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.xlarge",
                "c3.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "AsgTopicArn": {
            "Description": "Topic ARN that the auto-scaling group should use to send notifications",
            "Type": "String"
        },
        "RoleName": {
            "Description": "Name of IAM role to use with instance profile",
            "Type": "String"
        }
    },
    "Mappings": {
        "NatAmi": {
            "us-east-1": {
                "Ami": "ami-ad227cc4"
            },
            "us-west-2": {
                "Ami": "ami-2dae821d"
            }
        }
    },
    "Resources": {
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ {
                    "Ref": "RoleName"
                } ]
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "NatAmi",
                        {
                           "Ref": "AWS::Region" 
                        },
                        "Ami"
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "SecurityGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "AssociatePublicIpAddress": true,
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ex\nexec > >(tee /var/log/user-data.log) 2>&1",
                                "\n",
                                "export AWS_DEFAULT_REGION=\"", { "Ref": "AWS::Region" }, "\"\n",
                                "ROUTE_TABLE_ID=\"", { "Ref": "PrivateRouteTableId" }, "\"\n",
                                "INSTANCE_WAIT_HANDLE_URL=\"", { "Ref": "WaitForInstanceWaitHandle" }, "\"\n",
                                "\n",
                                "INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\n",
                                "DESCRIBE_INTERFACES_RESPONSE=$(aws ec2 describe-network-interfaces --filters \"{\\\"Name\\\":\\\"attachment.instance-id\\\", \\\"Values\\\":[\\\"$INSTANCE_ID\\\"]}\")\n",
                                 "\n",
                                 "yum -y install jq\n",
                                 "\n",
                                 "NETWORK_INTERFACE_ID=$(echo \"$DESCRIBE_INTERFACES_RESPONSE\" | jq --raw-output \".[\\\"NetworkInterfaces\\\"][0][\\\"NetworkInterfaceId\\\"]\")\n",
                                 "DESCRIBE_ROUTE_TABLES_RESPONSE=$(aws ec2 describe-route-tables --filters \"{\\\"Name\\\":\\\"route-table-id\\\", \\\"Values\\\":[\\\"$ROUTE_TABLE_ID\\\"]}\")\n",
                                 "\n",
                                 "# Delete existing route in route table\n",
                                 "if [[ $DESCRIBE_ROUTE_TABLES_RESPONSE == *\"0.0.0.0/0\"* ]]\n",
                                 "then aws ec2 delete-route --route-table-id $ROUTE_TABLE_ID --destination-cidr-block 0.0.0.0/0\n",
                                 "fi\n",
                                 "\n",
                                 "# Create new route in route table\n",
                                 "aws ec2 create-route --route-table-id $ROUTE_TABLE_ID --destination-cidr-block 0.0.0.0/0 --network-interface-id $NETWORK_INTERFACE_ID\n",
                                 "aws ec2 modify-network-interface-attribute --network-interface-id $NETWORK_INTERFACE_ID --source-dest-check \"{\\\"Value\\\": false}\"\n",
                                 "\n",
                                 "# Notify wait handle\n",
                                 "WAIT_HANDLE_JSON=\"{\\\"Status\\\": \\\"SUCCESS\\\", \\\"Reason\\\": \\\"Done\\\", \\\"UniqueId\\\": \\\"1\\\", \\\"Data\\\": \\\"$INSTANCE_ID\\\"}\"\n",
                                 "curl -X PUT -H 'Content-Type:' --data-binary \"$WAIT_HANDLE_JSON\" \"$INSTANCE_WAIT_HANDLE_URL\"\n",
                                 "\n",
                                 "echo END\n"
                            ]
                        ]
                    }
                }
            }
        },
        "InstanceGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnetId"
                    }
                ],
                "AvailabilityZones": [
                    {
                        "Ref": "AvailabilityZone"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "DesiredCapacity": "1",
                "MinSize": "1",
                "MaxSize": "1",
                "NotificationConfiguration": {
                    "TopicARN": {
                        "Ref": "AsgTopicArn"
                    },
                    "NotificationTypes": [
                        "autoscaling:EC2_INSTANCE_LAUNCH",
                        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                        "autoscaling:EC2_INSTANCE_TERMINATE",
                        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
                                    "nat",
                                    {
                                        "Ref": "Environment"
                                    }
                                ]
                            ]
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "SecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable public access to the NAT device",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WaitForInstanceWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {
            }
        },
        "WaitForInstance": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "InstanceGroup",
            "Properties": {
                "Handle": {
                    "Ref": "WaitForInstanceWaitHandle"
                },
                "Timeout": "600"
            }
        }
    }
}
