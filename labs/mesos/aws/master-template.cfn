{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Mesos master instance(s) in a public subnet with EIP attached",
    "Parameters": {
        "KeyName": {
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "String",
            "Default": "admin",
            "MinLength": "1",
            "MaxLength": "64",
            "AllowedPattern": "[-_ a-zA-Z0-9]*",
            "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
        },
        "Deployment": {
            "Description": "Deployment in which the instances belong",
            "Type": "String"
        },
        "Environment": {
            "Description": "Environment in which the instances belong",
            "Type": "String"
        },
        "VpcId": {
            "Description": "ID of the VPC",
            "Type": "String"
        },
        "AvailabilityZone": {
            "Description": "Availability zone of the subnets",
            "Type": "String"
        },
        "PublicSubnetId": {
            "Description": "ID of the public subnet",
            "Type": "String"
        },
        "PrivateSubnetId": {
            "Description": "ID of the private subnet",
            "Type": "String"
        },
        "NumberOfNodes": {
            "Description": "Number of kafka nodes to be deployed",
            "Type": "String",
            "Default": "1"
        },
        "InstanceType": {
            "Description": "EC2 instance type",
            "Type": "String",
            "Default": "m1.small",
            "AllowedValues": [
                "m1.small",
                "m1.medium",
                "m1.large",
                "m1.xlarge",
                "m2.xlarge",
                "m2.2xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "c1.medium",
                "c1.xlarge",
                "c3.xlarge",
                "c3.2xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "MesosVersion": {
            "Description": "Mesos version to be deployed",
            "Type": "String",
            "Default": ""
        },
        "MarathonVersion": {
            "Description": "Marathon version to be deployed",
            "Type": "String",
            "Default": ""
        },
        "MesosDns": {
            "Description": "true if mesos-dns will be deployed.",
            "Type": "String",
            "Default": "false"
        },
        "Marathon": {
            "Description": "true if marathon framework will be deployed.",
            "Type": "String",
            "Default": "false"
        },
        "Aurora": {
            "Description": "true if aurora framework will be deployed.",
            "Type": "String",
            "Default": "false"
        },
        "SlaveOnMaster": {
            "Description": "true if mesos slave will be deployed on mesos master node.",
            "Type": "String",
            "Default": "false"
        },
        "ZookeeperVersion": {
            "Description": "Zookeeper version to be deployed if no external zookeeper servers found",
            "Type": "String"
        },
        "AuroraUrl": {
            "Description": "URL of Aurora tarball to be deployed",
            "Type": "String"
        },
        "AsgTopicArn": {
            "Description": "Topic ARN that the auto-scaling group should use to send notifications",
            "Type": "String"
        },
        "RoleName": {
            "Description": "Name of IAM role to use with instance profile",
            "Type": "String"
        },
        "Virtualization": {
            "Description": "Virtualization type(hvm or paravirt) of image to be deployed",
            "Type": "String"
        },
        "HostedZoneId": {
            "Description": "Route53 hosted zone id which will be used for instances dns naming",
            "Type": "String"
        },
        "HostedZoneName": {
            "Description": "Route53 hosted zone name which will be used for instances dns naming",
            "Type": "String"
        },
        "Spark": {
            "Description": "true if Spark framework will be deployed.",
            "Type": "String"
        },
        "SparkVersion": {
            "Description": "Spark version to be deployed.",
            "Type": "String"
        },
        "SparkUrl": {
            "Description": "URL of Spark tarball to be deployed.",
            "Type": "String"
        },
        "Gauntlet": {
            "Description": "true if Gauntlet framework will be deployed.",
            "Type": "String"
        },
        "Chronos": {
            "Description": "true if Chronos framework will be deployed.",
            "Type": "String"
        }
    },
    "Mappings": {
        "UbuntuTrustyAmi": {
            "us-east-1": {
                "hvm": "ami-cc5229a4",
                "paravirt": "ami-d0ba0cb8"
            },
            "us-west-2": {
                "hvm": "ami-25ebb515",
                "paravirt": "ami-a94e0c99"
            }
        }
    },
    "Resources": {
        "InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [ {
                    "Ref": "RoleName"
                } ]
            }
        },
        "LaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceMonitoring" : false,
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "UbuntuTrustyAmi",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Ref": "Virtualization"
                        }
                    ]
                },
                "SecurityGroups": [
                    {
                        "Ref": "PublicSecurityGroup"
                    }
                ],
                "IamInstanceProfile": {
                    "Ref": "InstanceProfile"
                },
                "AssociatePublicIpAddress": true,
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ex\nexec > >(tee /var/log/user-data.log) 2>&1",
                                "\n",
                                "REGION=\"", { "Ref": "AWS::Region" }, "\"\n",
                                "DEPLOYMENT=\"", { "Ref": "Deployment" }, "\"\n",
                                "ENVIRONMENT=\"", { "Ref": "Environment" }, "\"\n",
                                "AURORA_URL=\"", { "Ref": "AuroraUrl" }, "\"\n",
                                "MESOS_VERSION=\"", { "Ref": "MesosVersion" }, "\"\n",
                                "MARATHON_VERSION=\"", { "Ref": "MarathonVersion" }, "\"\n",
                                "MESOS_DNS=\"", { "Ref": "MesosDns" }, "\"\n",
                                "MARATHON=\"", { "Ref": "Marathon" }, "\"\n",
                                "AURORA=\"", { "Ref": "Aurora" }, "\"\n",
                                "SLAVE_ON_MASTER=\"", { "Ref": "SlaveOnMaster" }, "\"\n",
                                "ZK_VERSION=\"", { "Ref": "ZookeeperVersion" }, "\"\n",
                                "HOSTED_ZONE_ID=\"", { "Ref": "HostedZoneId" }, "\"\n",
                                "HOSTED_ZONE_NAME=\"", { "Ref": "HostedZoneName" }, "\"\n",
                                "SPARK=\"", { "Ref": "Spark" }, "\"\n",
                                "SPARK_VERSION=\"", { "Ref": "SparkVersion" }, "\"\n",
                                "SPARK_URL=\"", { "Ref": "SparkUrl" }, "\"\n",
                                "GAUNTLET=\"", { "Ref": "Gauntlet" }, "\"\n",
                                "CHRONOS=\"", { "Ref": "Chronos" }, "\"\n",
                                "INSTANCE_WAIT_HANDLE_URL=\"", { "Ref": "WaitForInstanceWaitHandle" }, "\"\n",
                                "\n",
                                "WORKING_DIR=\"/deploy\"\nREPO_DIR=\"$WORKING_DIR/repo\"\nLAB_PATH=\"labs/mesos\"\nINSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id)\nRUBY_URL=\"https://rvm_io.global.ssl.fastly.net/binaries/ubuntu/14.04/x86_64/ruby-2.1.5.tar.bz2\"\n\n# Update repos and install dependencies\napt-get update\napt-get -y install git-core build-essential awscli\n\n# Install rvm for the latest ruby version\ncommand curl -sSL https://rvm.io/mpapis.asc | gpg --import -\ncurl -sSL https://get.rvm.io | bash -s stable\nsource /usr/local/rvm/scripts/rvm\necho \"$RUBY_URL=1a201d082586036092cfc5b79dd26718\" >> /usr/local/rvm/user/md5\necho \"$RUBY_URL=91216074cb5f66ef5e33d47e5d3410148cc672dc73cc0d9edff92e00d20c9973bec7ab21a3462ff4e9ff9b23eff952e83b51b96a3b11cb5c23be587046eb0c57\" >> /usr/local/rvm/user/sha512\nrvm mount -r $RUBY_URL --verify-downloads 1\nrvm use 2.1 --default\nrvm rubygems current\n\n# Get latest version of jq\nwget https://stedolan.github.io/jq/download/linux64/jq -O /usr/local/bin/jq\nchmod +x /usr/local/bin/jq\n\ngit clone https://git@github.com/stealthly/minotaur.git \"$REPO_DIR\"\n\n# Install Docker\ncurl -sSL https://get.docker.com/ubuntu/ | sh\n\n# Install Chef\ncurl -L https://www.opscode.com/chef/install.sh | bash\n\n# Install Bundler and community cookbooks with librarian\naws s3 cp --region $REGION s3://bdoss-deploy/gems/librarian-0.1.2.gem /tmp/librarian-0.1.2.gem\ngem install /tmp/librarian-0.1.2.gem --no-ri --no-rdoc\ngem install bundler --no-ri --no-rdoc\ncd $REPO_DIR/$LAB_PATH/chef/ && bundle install && librarian-chef install\n\n# Find zookeeper nodes that belong to the same deployment and environment\nNODES_FILTER=\"Name=tag:Name,Values=zookeeper.$DEPLOYMENT.$ENVIRONMENT\"\nQUERY=\"Reservations[].Instances[].NetworkInterfaces[].PrivateIpAddress\"\nZK_SERVERS=$(aws ec2 describe-instances --region \"$REGION\" --filters \"$NODES_FILTER\" --query \"$QUERY\" | jq --raw-output 'join(\",\")')\n\n# If no zookeeper nodes found - form zookeeper cluster with zk's on mesos masters\n# Providing list of zk servers is also mandatory for aurora\nNODES_FILTER=\"Name=tag:Name,Values=mesos-master.$DEPLOYMENT.$ENVIRONMENT\"\nMESOS_MASTERS=$(aws ec2 describe-instances --region \"$REGION\" --filters \"$NODES_FILTER\" --query \"$QUERY\" | jq --raw-output 'join(\",\")')\nMESOS_MASTERS_EIP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\n\n# Find kafka and cassandra nodes that belong to the same deployment and environment\nNODES_FILTER=\"Name=tag:Name,Values=cassandra.$DEPLOYMENT.$ENVIRONMENT\"\nCASSANDRA_MASTER=$(aws ec2 describe-instances --region \"$REGION\" --filters \"$NODES_FILTER\" --query \"$QUERY\" | jq --raw-output 'join(\",\")')\nNODES_FILTER=\"Name=tag:Name,Values=kafka.$DEPLOYMENT.$ENVIRONMENT\"\nKAFKA_SERVERS=$(aws ec2 describe-instances --region \"$REGION\" --filters \"$NODES_FILTER\" --query \"$QUERY\" | jq --raw-output 'join(\",\")')\n\n# Fix chef-solo bug(absence of ec2 hint)\nmkdir -p /etc/chef/ohai/hints\ntouch /etc/chef/ohai/hints/ec2.json\n\n# Run Chef\nmesos_version=\"$MESOS_VERSION\" \\\nmarathon_version=\"$MARATHON_VERSION\" \\\nmesos_dns=\"$MESOS_DNS\" \\\nmarathon=\"$MARATHON\" \\\naurora=\"$AURORA\" \\\nslave_on_master=\"$SLAVE_ON_MASTER\" \\\nzk_version=\"$ZK_VERSION\" \\\nmesos_masters=\"$MESOS_MASTERS\" \\\nmesos_masters_eip=\"$MESOS_MASTERS_EIP\" \\\nhosted_zone_name=\"$HOSTED_ZONE_NAME\" \\\nzk_servers=\"$ZK_SERVERS\" \\\ncassandra_master=\"$CASSANDRA_MASTER\" \\\nkafka_servers=\"$KAFKA_SERVERS\" \\\naurora_url=\"$AURORA_URL\" \\\nspark=\"$SPARK\" \\\nspark_version=\"$SPARK_VERSION\" \\\nspark_url=\"$SPARK_URL\" \\\ngauntlet=\"$GAUNTLET\" \\\nchronos=\"$CHRONOS\" \\\nchef-solo -c \"$REPO_DIR/$LAB_PATH/chef/solo.rb\" -j \"$REPO_DIR/$LAB_PATH/chef/solo_master.json\"\n\n# Create route53 dns entry\naws route53 change-resource-record-sets --hosted-zone-id $HOSTED_ZONE_ID --change-batch file:///tmp/route53_record.json\n\n# Wait up to 60 seconds untill marathon is up\nsleep $((RANDOM%30+30))\n\n# Start mesos-dns on marathon\nif [[ $MESOS_DNS == true && $MARATHON == true && $(curl 127.0.0.1:8080/v2/apps) != *mesos-dns* ]]\n    then curl -X POST -L -H \"Content-Type: application/json\" http://127.0.0.1:8080/v2/apps -d@/tmp/mesos-dns.json\nfi\n\n# Start producer on marathon\nif [[ $GAUNTLET == true && $MARATHON == true && $(curl 127.0.0.1:8080/v2/apps) != *producer* ]]\n    then curl -X POST -L -H \"Content-Type: application/json\" http://127.0.0.1:8080/v2/apps -d@/tmp/producer.json\nfi\n\n# Start gauntlet framework on chronos\nif [[ $GAUNTLET == true && $CHRONOS == true && $(curl 127.0.0.1:8081/scheduler/jobs) != *gauntlet* ]]\n    then curl -X POST -L -H 'Content-Type: application/json' http://127.0.0.1:8081/scheduler/iso8601 -d@/tmp/gauntlet.json\nfi\n\n# Notify wait handle\nWAIT_HANDLE_JSON=\"{\\\"Status\\\": \\\"SUCCESS\\\", \\\"Reason\\\": \\\"Done\\\", \\\"UniqueId\\\": \\\"1\\\", \\\"Data\\\": \\\"$INSTANCE_ID\\\"}\"\ncurl -X PUT -H 'Content-Type:' --data-binary \"$WAIT_HANDLE_JSON\" \"$INSTANCE_WAIT_HANDLE_URL\"\n\necho END\n"
                            ]
                        ]
                    }
                }
            }
        },
        "InstanceGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "PublicSubnetId"
                    }
                ],
                "AvailabilityZones": [
                    {
                        "Ref": "AvailabilityZone"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "LaunchConfig"
                },
                "DesiredCapacity": {
                    "Ref": "NumberOfNodes"
                },
                "MinSize": {
                    "Ref": "NumberOfNodes"
                },
                "MaxSize": {
                    "Ref": "NumberOfNodes"
                },
                "NotificationConfiguration": {
                    "TopicARN": {
                        "Ref": "AsgTopicArn"
                    },
                    "NotificationTypes": [
                        "autoscaling:EC2_INSTANCE_LAUNCH",
                        "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                        "autoscaling:EC2_INSTANCE_TERMINATE",
                        "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                ".",
                                [
                                    "mesos-master",
                                    {
                                        "Ref": "Deployment"
                                    },
                                    {
                                        "Ref": "Environment"
                                    }
                                ]
                            ]
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "PublicSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable public access to mesos master",
                "VpcId": {
                    "Ref": "VpcId"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "10.0.0.0/8"
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "CidrIp": "10.0.0.0/8"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "1024",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "SecurityGroupEgress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "udp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "53",
                        "ToPort": "53",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "1024",
                        "ToPort": "65535",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "WaitForInstanceWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {
            }
        },
        "WaitForInstance": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "InstanceGroup",
            "Properties": {
                "Handle": {
                    "Ref": "WaitForInstanceWaitHandle"
                },
                "Timeout": "1200"
            }
        }
    }
}
